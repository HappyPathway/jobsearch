# Core Library Migration Plan

## Overview
This document outlines the plan to migrate all features to use the new core library patterns, ensuring consistent use of:
- BaseFeature inheritance
- Type-safe contexts and outputs
- Template-based prompting
- Core service integration

## Priority 1: Core Component Updates

### Base Infrastructure
- [ ] Enhance BaseFeature class
  - [ ] Add missing utility methods
  - [ ] Improve error handling
  - [ ] Add context manager support
  - [ ] Document extension points

### Template System
- [ ] Expand TemplateManager
  - [ ] Add template inheritance
  - [ ] Add custom filters
  - [ ] Add validation hooks
  - [ ] Create template testing utilities

### Testing Infrastructure
- [ ] Create BaseFeatureTest class
- [ ] Add template test helpers
- [ ] Add mock AI response system
- [ ] Add common assertions

## Priority 2: Job Search Feature

### Context and Types
- [ ] Update JobSearchContext
  - [ ] Add missing fields
  - [ ] Document all fields
  - [ ] Add validation

### Templates
- [ ] Move prompts to templates/
  - [ ] system.j2
  - [ ] search.j2
  - [ ] analyze.j2
  - [ ] score.j2

### Components
- [ ] Migrate search.py to use core web scraper
- [ ] Migrate analysis.py to use core AI engine
- [ ] Migrate strategy.py to use template system
- [ ] Update tracker.py to use core database

## Priority 3: Document Generation

### Context and Types
- [ ] Create DocumentContext
- [ ] Create GeneratedDocument type
- [ ] Add validation rules

### Templates
- [ ] Migrate HTML templates
- [ ] Create document prompts
- [ ] Add template inheritance

### Components
- [ ] Update generator.py to use core AI
- [ ] Update pdf.py to use core storage
- [ ] Add document-specific tools

## Priority 4: Strategy Generation

### Context and Types
- [ ] Create StrategyContext
- [ ] Create Strategy output types
- [ ] Add validation

### Templates
- [ ] Create strategy templates
  - [ ] daily.j2
  - [ ] weekly.j2
  - [ ] focused.j2

### Components
- [ ] Update generator.py
- [ ] Update formatter.py to use core markdown
- [ ] Add strategy-specific tools

## Priority 5: Profile Management

### Context and Types
- [ ] Create ProfileContext
- [ ] Create profile-specific types
- [ ] Add validation rules

### Components
- [ ] Update scraper.py to use core web scraper
- [ ] Update parsers to use core AI engine
- [ ] Update summarizer to use template system

## Priority 6: Web Presence

### Context and Types
- [ ] Create WebPresenceContext
- [ ] Create content types
- [ ] Add validation

### Templates
- [ ] Create content templates
- [ ] Add template inheritance
- [ ] Add custom filters

### Components
- [ ] Update github_pages.py
- [ ] Update medium.py
- [ ] Update content_agent.py

## Priority 7: Glassdoor Feature

### Context and Types
- [ ] Create GlassdoorContext
- [ ] Create company analysis types
- [ ] Add validation

### Components
- [ ] Update scraper.py
- [ ] Update analyzer.py
- [ ] Add Glassdoor-specific tools

## Next Steps

### 1. Core Components (Week 1)
1. Enhance BaseFeature class
2. Expand TemplateManager
3. Create test infrastructure
4. Document extension points

### 2. Job Search Migration (Week 2)
1. Create template structure
2. Update context types
3. Migrate components
4. Add tests

### 3. Documentation (Week 3)
1. Add migration guide
2. Document template patterns
3. Create examples
4. Update architecture docs

### 4. Remaining Features (Weeks 4-6)
1. Document generation
2. Strategy generation
3. Profile management
4. Web presence
5. Glassdoor integration

## Migration Guidelines

### Feature Migration Steps
1. Create feature-specific types
2. Convert prompts to templates
3. Update feature class to inherit BaseFeature
4. Add feature-specific tools
5. Add tests
6. Update documentation

### Best Practices
1. Use core components instead of feature-specific implementations
2. Keep templates simple and focused
3. Add comprehensive type hints
4. Write tests for all changes
5. Document all public interfaces

### Testing Requirements
1. Unit tests for feature class
2. Template validation tests
3. Integration tests with core
4. Error handling tests
5. Performance benchmarks

## Questions to Address

1. Template Organization
- How to handle complex templates?
- When to use inheritance?
- How to version templates?

2. Performance
- Template caching strategy?
- AI response caching?
- Database optimization?

3. Error Handling
- How to handle template errors?
- AI failure fallbacks?
- Data validation errors?
