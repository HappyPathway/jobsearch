name: GitHub Pages Deployment

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main
    paths:
      - 'pages/**'
      - 'docs/**'
      - 'career_data.db'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
          
      - name: Generate GitHub Pages
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
          ENABLE_SLACK_NOTIFICATIONS: "true"
        run: |
          python scripts/generate_github_pages.py

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Send Slack Notification for Deployment
        if: success()
        env:
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
        run: |
          pip install slack-sdk
          python -c '
          from slack_sdk import WebClient
          from slack_sdk.errors import SlackApiError
          import os
          
          token = os.environ["SLACK_API_TOKEN"]
          channel = os.environ["SLACK_CHANNEL_ID"]
          
          try:
              client = WebClient(token=token)
              response = client.chat_postMessage(
                  channel=channel,
                  text="âœ… Job Search Portal has been successfully deployed to GitHub Pages",
                  blocks=[
                      {
                          "type": "header",
                          "text": {
                              "type": "plain_text",
                              "text": "âœ… Job Search Portal Deployed",
                              "emoji": True
                          }
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "The job search portal has been successfully updated and deployed to GitHub Pages."
                          }
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "<http://blog.happypathway.com/jobsearch/|ðŸ”— View the Job Search Portal>"
                          }
                      }
                  ]
              )
              print("Slack notification sent successfully!")
          except SlackApiError as e:
              print(f"Error sending Slack notification: {e.response[\"error\"]}")
          '

