name: System Initialization

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '.github/workflows/system-init.yml'

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  initialize:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup GCS and migrate secrets
        id: setup
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_SECRETS: ${{ toJson(secrets) }}
        run: |
          # Setup GCS first
          python scripts/setup_gcs.py
          
          # Create temporary secrets file for migration
          echo "$INITIAL_SECRETS" > github_secrets.json
          
          # Run secrets migration
          python scripts/migrate_secrets.py
          
          # Clean up temporary file
          rm github_secrets.json
          
          # Set bucket name for subsequent steps
          echo "bucket_name=$(cat config/gcs.json | jq -r .GCS_BUCKET_NAME)" >> $GITHUB_OUTPUT

      - name: Initialize fresh database
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ steps.setup.outputs.bucket_name }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
        run: |
          python scripts/init_db.py
          
      - name: Process profile data
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ steps.setup.outputs.bucket_name }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
        run: |
          python scripts/profile_scraper.py
          
      - name: Process resume
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ steps.setup.outputs.bucket_name }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
        run: |
          python scripts/resume_parser.py
          
      - name: Process cover letter
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ steps.setup.outputs.bucket_name }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
        run: |
          python scripts/cover_letter_parser.py
          
      - name: Combine and summarize
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ steps.setup.outputs.bucket_name }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
        run: |
          python scripts/combine_and_summarize.py
          
      - name: Generate job strategy
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ steps.setup.outputs.bucket_name }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
          ENABLE_SLACK_NOTIFICATIONS: "true"
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python scripts/job_strategy.py

      - name: Generate GitHub Pages
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GCS_BUCKET_NAME: ${{ steps.setup.outputs.bucket_name }}
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
          ENABLE_SLACK_NOTIFICATIONS: "true"
        run: |
          python scripts/generate_github_pages.py

      - name: Send Slack Initialization Notification
        if: success()
        env:
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL_ID: ${{ vars.SLACK_CHANNEL_ID }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          PR_URL: ${{ steps.cpr.outputs.pull-request-url }}
        run: |
          pip install slack-sdk
          python -c '
          from slack_sdk import WebClient
          from slack_sdk.errors import SlackApiError
          import os, sys
          
          token = os.environ["SLACK_API_TOKEN"]
          channel = os.environ["SLACK_CHANNEL_ID"]
          pr_number = os.environ.get("PR_NUMBER")
          pr_url = os.environ.get("PR_URL")
          
          try:
              client = WebClient(token=token)
              blocks = [
                  {
                      "type": "header",
                      "text": {
                          "type": "plain_text",
                          "text": "ðŸš€ Job Search System Initialized",
                          "emoji": True
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "The job search automation system has been successfully initialized with fresh data."
                      }
                  },
                  {
                      "type": "section",
                      "fields": [
                          {
                              "type": "mrkdwn",
                              "text": "*Database:* âœ… Created"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*Profile Data:* âœ… Processed"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*Job Strategy:* âœ… Generated"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*GitHub Pages:* âœ… Generated"
                          }
                      ]
                  }
              ]
              
              # Add PR info if available
              if pr_url and pr_number:
                  blocks.append({
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": f"<{pr_url}|ðŸ‘‰ Review Pull Request #{pr_number}>"
                      }
                  })
              
              client.chat_postMessage(
                  channel=channel,
                  text="Job Search System successfully initialized",
                  blocks=blocks
              )
              print("Slack notification sent successfully!")
          except SlackApiError as e:
              error_message = e.response.get("error", "Unknown error")
              print(f"Error sending Slack notification: {error_message}")
              sys.exit(1)
          '